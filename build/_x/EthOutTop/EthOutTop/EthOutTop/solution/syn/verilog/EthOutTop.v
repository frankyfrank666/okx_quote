// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="EthOutTop_EthOutTop,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu9p-flgb2104-2L-e,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.433000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=0,HLS_SYN_FF=1584,HLS_SYN_LUT=2434,HLS_VERSION=2020_1}" *)

module EthOutTop (
        ap_clk,
        ap_rst_n,
        event_done,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        ethernet_stream_in_TDATA,
        ethernet_stream_in_TVALID,
        ethernet_stream_in_TREADY,
        ethernet_stream_in_TKEEP,
        ethernet_stream_in_TSTRB,
        ethernet_stream_in_TLAST,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt,
        event_start,
        stall_start_ext,
        stall_done_ext,
        stall_start_str,
        stall_done_str,
        stall_start_int,
        stall_done_int
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_state75 = 5'd16;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_GMEM_ID_WIDTH = 1;
parameter    C_M_AXI_GMEM_ADDR_WIDTH = 64;
parameter    C_M_AXI_GMEM_DATA_WIDTH = 128;
parameter    C_M_AXI_GMEM_AWUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_ARUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_WUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_RUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_BUSER_WIDTH = 1;
parameter    C_M_AXI_GMEM_USER_VALUE = 0;
parameter    C_M_AXI_GMEM_PROT_VALUE = 0;
parameter    C_M_AXI_GMEM_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_GMEM_WSTRB_WIDTH = (128 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   event_done;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_AWADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_AWID;
output  [7:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [C_M_AXI_GMEM_AWUSER_WIDTH - 1:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_WDATA;
output  [C_M_AXI_GMEM_WSTRB_WIDTH - 1:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_WID;
output  [C_M_AXI_GMEM_WUSER_WIDTH - 1:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [C_M_AXI_GMEM_ADDR_WIDTH - 1:0] m_axi_gmem_ARADDR;
output  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_ARID;
output  [7:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [C_M_AXI_GMEM_ARUSER_WIDTH - 1:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [C_M_AXI_GMEM_DATA_WIDTH - 1:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_RID;
input  [C_M_AXI_GMEM_RUSER_WIDTH - 1:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [C_M_AXI_GMEM_ID_WIDTH - 1:0] m_axi_gmem_BID;
input  [C_M_AXI_GMEM_BUSER_WIDTH - 1:0] m_axi_gmem_BUSER;
input  [63:0] ethernet_stream_in_TDATA;
input   ethernet_stream_in_TVALID;
output   ethernet_stream_in_TREADY;
input  [7:0] ethernet_stream_in_TKEEP;
input  [7:0] ethernet_stream_in_TSTRB;
input  [0:0] ethernet_stream_in_TLAST;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;
output   event_start;
output   stall_start_ext;
output   stall_done_ext;
output   stall_start_str;
output   stall_done_str;
output   stall_start_int;
output   stall_done_int;

reg stall_start_ext;
reg stall_done_ext;
reg stall_start_str;
reg stall_done_str;
reg stall_start_int;
reg stall_done_int;

(* shreg_extract = "no" *) reg    ap_rst_reg_2;
(* shreg_extract = "no" *) reg    ap_rst_reg_1;
(* shreg_extract = "no" *) reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] out_r;
wire   [31:0] buffSize;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln882_reg_440;
reg   [0:0] tmp_reg_449;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
reg    gmem_blk_n_B;
reg    ap_enable_reg_pp0_iter23;
reg   [0:0] tmp_reg_449_pp0_iter23_reg;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] tmp_reg_449_pp0_iter1_reg;
reg    ap_enable_reg_pp0_iter24;
reg    ethernet_stream_in_TDATA_blk_n;
reg    gmem_AWVALID;
wire    gmem_AWREADY;
reg   [63:0] gmem_AWADDR;
reg    gmem_WVALID;
wire    gmem_WREADY;
reg   [127:0] gmem_WDATA;
reg   [15:0] gmem_WSTRB;
wire    gmem_ARREADY;
wire    gmem_RVALID;
wire   [127:0] gmem_RDATA;
wire    gmem_RLAST;
wire   [0:0] gmem_RID;
wire   [0:0] gmem_RUSER;
wire   [1:0] gmem_RRESP;
wire    gmem_BVALID;
reg    gmem_BREADY;
wire   [1:0] gmem_BRESP;
wire   [0:0] gmem_BID;
wire   [0:0] gmem_BUSER;
reg   [31:0] indvars_iv_reg_192;
reg   [63:0] out_read_reg_415;
wire   [15:0] shl_ln324_fu_223_p2;
reg   [15:0] shl_ln324_reg_420;
wire   [127:0] zext_ln324_1_fu_237_p1;
reg   [127:0] zext_ln324_1_reg_425;
wire   [15:0] shl_ln324_2_fu_245_p2;
reg   [15:0] shl_ln324_2_reg_430;
wire   [120:0] zext_ln18_fu_259_p1;
reg   [120:0] zext_ln18_reg_435;
wire   [0:0] icmp_ln882_fu_263_p2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
reg    ap_block_state5_io;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_state14_pp0_stage0_iter4;
wire    ap_block_state17_pp0_stage0_iter5;
wire    ap_block_state20_pp0_stage0_iter6;
wire    ap_block_state23_pp0_stage0_iter7;
wire    ap_block_state26_pp0_stage0_iter8;
wire    ap_block_state29_pp0_stage0_iter9;
wire    ap_block_state32_pp0_stage0_iter10;
wire    ap_block_state35_pp0_stage0_iter11;
wire    ap_block_state38_pp0_stage0_iter12;
wire    ap_block_state41_pp0_stage0_iter13;
wire    ap_block_state44_pp0_stage0_iter14;
wire    ap_block_state47_pp0_stage0_iter15;
wire    ap_block_state50_pp0_stage0_iter16;
wire    ap_block_state53_pp0_stage0_iter17;
wire    ap_block_state56_pp0_stage0_iter18;
wire    ap_block_state59_pp0_stage0_iter19;
wire    ap_block_state62_pp0_stage0_iter20;
wire    ap_block_state65_pp0_stage0_iter21;
wire    ap_block_state68_pp0_stage0_iter22;
wire    ap_block_state71_pp0_stage0_iter23;
reg    ap_block_state74_pp0_stage0_iter24;
reg    ap_block_pp0_stage0_11001;
wire   [31:0] add_ln695_fu_268_p2;
reg   [31:0] add_ln695_reg_444;
wire   [0:0] tmp_nbreadreq_fu_120_p6;
reg   [0:0] tmp_reg_449_pp0_iter2_reg;
reg   [0:0] tmp_reg_449_pp0_iter3_reg;
reg   [0:0] tmp_reg_449_pp0_iter4_reg;
reg   [0:0] tmp_reg_449_pp0_iter5_reg;
reg   [0:0] tmp_reg_449_pp0_iter6_reg;
reg   [0:0] tmp_reg_449_pp0_iter7_reg;
reg   [0:0] tmp_reg_449_pp0_iter8_reg;
reg   [0:0] tmp_reg_449_pp0_iter9_reg;
reg   [0:0] tmp_reg_449_pp0_iter10_reg;
reg   [0:0] tmp_reg_449_pp0_iter11_reg;
reg   [0:0] tmp_reg_449_pp0_iter12_reg;
reg   [0:0] tmp_reg_449_pp0_iter13_reg;
reg   [0:0] tmp_reg_449_pp0_iter14_reg;
reg   [0:0] tmp_reg_449_pp0_iter15_reg;
reg   [0:0] tmp_reg_449_pp0_iter16_reg;
reg   [0:0] tmp_reg_449_pp0_iter17_reg;
reg   [0:0] tmp_reg_449_pp0_iter18_reg;
reg   [0:0] tmp_reg_449_pp0_iter19_reg;
reg   [0:0] tmp_reg_449_pp0_iter20_reg;
reg   [0:0] tmp_reg_449_pp0_iter21_reg;
reg   [0:0] tmp_reg_449_pp0_iter22_reg;
wire   [63:0] add_ln324_fu_286_p2;
reg   [63:0] add_ln324_reg_453;
reg   [59:0] trunc_ln1_reg_459;
reg   [0:0] empty_reg_464_3;
reg    ap_predicate_op118_read_state3;
reg    ap_block_state3_pp0_stage1_iter0;
reg    ap_predicate_op124_writereq_state3;
reg    ap_block_state3_io;
wire    ap_block_state6_pp0_stage1_iter1;
reg    ap_block_state6_io;
wire    ap_block_state9_pp0_stage1_iter2;
wire    ap_block_state12_pp0_stage1_iter3;
wire    ap_block_state15_pp0_stage1_iter4;
wire    ap_block_state18_pp0_stage1_iter5;
wire    ap_block_state21_pp0_stage1_iter6;
wire    ap_block_state24_pp0_stage1_iter7;
wire    ap_block_state27_pp0_stage1_iter8;
wire    ap_block_state30_pp0_stage1_iter9;
wire    ap_block_state33_pp0_stage1_iter10;
wire    ap_block_state36_pp0_stage1_iter11;
wire    ap_block_state39_pp0_stage1_iter12;
wire    ap_block_state42_pp0_stage1_iter13;
wire    ap_block_state45_pp0_stage1_iter14;
wire    ap_block_state48_pp0_stage1_iter15;
wire    ap_block_state51_pp0_stage1_iter16;
wire    ap_block_state54_pp0_stage1_iter17;
wire    ap_block_state57_pp0_stage1_iter18;
wire    ap_block_state60_pp0_stage1_iter19;
wire    ap_block_state63_pp0_stage1_iter20;
wire    ap_block_state66_pp0_stage1_iter21;
wire    ap_block_state69_pp0_stage1_iter22;
reg    ap_block_state72_pp0_stage1_iter23;
reg    ap_block_pp0_stage1_11001;
reg   [63:0] tmp_data_V_reg_469;
wire   [127:0] shl_ln324_5_fu_340_p2;
reg   [127:0] shl_ln324_5_reg_480;
reg   [59:0] trunc_ln324_1_reg_485;
reg   [59:0] trunc_ln324_2_reg_490;
wire    ap_block_state4_pp0_stage2_iter0;
reg    ap_predicate_op134_write_state4;
reg    ap_predicate_op137_writereq_state4;
reg    ap_block_state4_io;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state10_pp0_stage2_iter2;
wire    ap_block_state13_pp0_stage2_iter3;
wire    ap_block_state16_pp0_stage2_iter4;
wire    ap_block_state19_pp0_stage2_iter5;
wire    ap_block_state22_pp0_stage2_iter6;
wire    ap_block_state25_pp0_stage2_iter7;
wire    ap_block_state28_pp0_stage2_iter8;
wire    ap_block_state31_pp0_stage2_iter9;
wire    ap_block_state34_pp0_stage2_iter10;
wire    ap_block_state37_pp0_stage2_iter11;
wire    ap_block_state40_pp0_stage2_iter12;
wire    ap_block_state43_pp0_stage2_iter13;
wire    ap_block_state46_pp0_stage2_iter14;
wire    ap_block_state49_pp0_stage2_iter15;
wire    ap_block_state52_pp0_stage2_iter16;
wire    ap_block_state55_pp0_stage2_iter17;
wire    ap_block_state58_pp0_stage2_iter18;
wire    ap_block_state61_pp0_stage2_iter19;
wire    ap_block_state64_pp0_stage2_iter20;
wire    ap_block_state67_pp0_stage2_iter21;
wire    ap_block_state70_pp0_stage2_iter22;
reg    ap_block_state73_pp0_stage2_iter23;
reg    ap_block_pp0_stage2_11001;
wire   [120:0] shl_ln324_6_fu_391_p2;
reg   [120:0] shl_ln324_6_reg_501;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage2_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg   [31:0] ap_phi_mux_indvars_iv_phi_fu_196_p4;
wire  signed [63:0] sext_ln324_fu_313_p1;
wire  signed [63:0] sext_ln324_1_fu_377_p1;
wire  signed [63:0] sext_ln324_2_fu_396_p1;
wire   [127:0] zext_ln324_4_fu_373_p1;
reg    ap_block_pp0_stage2_01001;
reg    ap_block_pp0_stage0_01001;
wire   [127:0] zext_ln324_7_fu_406_p1;
reg    ap_block_pp0_stage1_01001;
wire   [3:0] trunc_ln18_fu_203_p1;
wire   [3:0] xor_ln18_fu_207_p2;
wire   [15:0] zext_ln324_fu_219_p1;
wire   [6:0] shl_ln324_1_fu_229_p3;
wire   [3:0] add_ln18_fu_213_p2;
wire   [15:0] zext_ln324_2_fu_241_p1;
wire   [6:0] shl_ln324_3_fu_251_p3;
wire   [35:0] shl_ln324_4_fu_274_p3;
wire   [63:0] zext_ln324_3_fu_282_p1;
wire   [15:0] tmp_2_fu_328_p3;
wire   [127:0] zext_ln324_5_fu_336_p1;
wire   [63:0] add_ln324_1_fu_323_p2;
wire   [63:0] add_ln324_2_fu_355_p2;
wire   [120:0] zext_ln324_6_fu_387_p1;
wire    ap_CS_fsm_state75;
reg   [4:0] ap_NS_fsm;
reg    ap_block_pp0_stage1_subdone;
wire    ap_ext_blocking_cur_n;
wire    ap_str_blocking_cur_n;
wire    ap_ext_blocking_n;
wire    ap_str_blocking_n;
wire    ap_int_blocking_n;
reg    ap_ext_blocking_n_reg;
reg    ap_str_blocking_n_reg;
reg    ap_int_blocking_n_reg;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_ethernet_stream_in_V_data_V_U_apdone_blk;
wire   [63:0] ethernet_stream_in_TDATA_int_regslice;
wire    ethernet_stream_in_TVALID_int_regslice;
reg    ethernet_stream_in_TREADY_int_regslice;
wire    regslice_both_ethernet_stream_in_V_data_V_U_ack_in;
wire    regslice_both_ethernet_stream_in_V_keep_V_U_apdone_blk;
wire   [7:0] ethernet_stream_in_TKEEP_int_regslice;
wire    regslice_both_ethernet_stream_in_V_keep_V_U_vld_out;
wire    regslice_both_ethernet_stream_in_V_keep_V_U_ack_in;
wire    regslice_both_ethernet_stream_in_V_strb_V_U_apdone_blk;
wire   [7:0] ethernet_stream_in_TSTRB_int_regslice;
wire    regslice_both_ethernet_stream_in_V_strb_V_U_vld_out;
wire    regslice_both_ethernet_stream_in_V_strb_V_U_ack_in;
wire    regslice_both_ethernet_stream_in_V_last_V_U_apdone_blk;
wire   [0:0] ethernet_stream_in_TLAST_int_regslice;
wire    regslice_both_ethernet_stream_in_V_last_V_U_vld_out;
wire    regslice_both_ethernet_stream_in_V_last_V_U_ack_in;

// power-on initialization
initial begin
#0 ap_rst_reg_2 = 1'b1;
#0 ap_rst_reg_1 = 1'b1;
#0 ap_rst_n_inv = 1'b1;
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
end

EthOutTop_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .out_r(out_r),
    .buffSize(buffSize),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .event_start(event_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

EthOutTop_gmem_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_DW( 128 ),
    .USER_AW( 64 ),
    .USER_MAXREQS( 69 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_GMEM_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_GMEM_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_GMEM_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_GMEM_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_GMEM_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_GMEM_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_GMEM_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_GMEM_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_GMEM_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_GMEM_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_GMEM_CACHE_VALUE ))
gmem_m_axi_U(
    .AWVALID(m_axi_gmem_AWVALID),
    .AWREADY(m_axi_gmem_AWREADY),
    .AWADDR(m_axi_gmem_AWADDR),
    .AWID(m_axi_gmem_AWID),
    .AWLEN(m_axi_gmem_AWLEN),
    .AWSIZE(m_axi_gmem_AWSIZE),
    .AWBURST(m_axi_gmem_AWBURST),
    .AWLOCK(m_axi_gmem_AWLOCK),
    .AWCACHE(m_axi_gmem_AWCACHE),
    .AWPROT(m_axi_gmem_AWPROT),
    .AWQOS(m_axi_gmem_AWQOS),
    .AWREGION(m_axi_gmem_AWREGION),
    .AWUSER(m_axi_gmem_AWUSER),
    .WVALID(m_axi_gmem_WVALID),
    .WREADY(m_axi_gmem_WREADY),
    .WDATA(m_axi_gmem_WDATA),
    .WSTRB(m_axi_gmem_WSTRB),
    .WLAST(m_axi_gmem_WLAST),
    .WID(m_axi_gmem_WID),
    .WUSER(m_axi_gmem_WUSER),
    .ARVALID(m_axi_gmem_ARVALID),
    .ARREADY(m_axi_gmem_ARREADY),
    .ARADDR(m_axi_gmem_ARADDR),
    .ARID(m_axi_gmem_ARID),
    .ARLEN(m_axi_gmem_ARLEN),
    .ARSIZE(m_axi_gmem_ARSIZE),
    .ARBURST(m_axi_gmem_ARBURST),
    .ARLOCK(m_axi_gmem_ARLOCK),
    .ARCACHE(m_axi_gmem_ARCACHE),
    .ARPROT(m_axi_gmem_ARPROT),
    .ARQOS(m_axi_gmem_ARQOS),
    .ARREGION(m_axi_gmem_ARREGION),
    .ARUSER(m_axi_gmem_ARUSER),
    .RVALID(m_axi_gmem_RVALID),
    .RREADY(m_axi_gmem_RREADY),
    .RDATA(m_axi_gmem_RDATA),
    .RLAST(m_axi_gmem_RLAST),
    .RID(m_axi_gmem_RID),
    .RUSER(m_axi_gmem_RUSER),
    .RRESP(m_axi_gmem_RRESP),
    .BVALID(m_axi_gmem_BVALID),
    .BREADY(m_axi_gmem_BREADY),
    .BRESP(m_axi_gmem_BRESP),
    .BID(m_axi_gmem_BID),
    .BUSER(m_axi_gmem_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(gmem_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(gmem_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(gmem_RDATA),
    .I_RID(gmem_RID),
    .I_RUSER(gmem_RUSER),
    .I_RRESP(gmem_RRESP),
    .I_RLAST(gmem_RLAST),
    .I_AWVALID(gmem_AWVALID),
    .I_AWREADY(gmem_AWREADY),
    .I_AWADDR(gmem_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(gmem_WVALID),
    .I_WREADY(gmem_WREADY),
    .I_WDATA(gmem_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(gmem_WSTRB),
    .I_BVALID(gmem_BVALID),
    .I_BREADY(gmem_BREADY),
    .I_BRESP(gmem_BRESP),
    .I_BID(gmem_BID),
    .I_BUSER(gmem_BUSER)
);

regslice_both #(
    .DataWidth( 64 ))
regslice_both_ethernet_stream_in_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ethernet_stream_in_TDATA),
    .vld_in(ethernet_stream_in_TVALID),
    .ack_in(regslice_both_ethernet_stream_in_V_data_V_U_ack_in),
    .data_out(ethernet_stream_in_TDATA_int_regslice),
    .vld_out(ethernet_stream_in_TVALID_int_regslice),
    .ack_out(ethernet_stream_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_ethernet_stream_in_V_data_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_ethernet_stream_in_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ethernet_stream_in_TKEEP),
    .vld_in(ethernet_stream_in_TVALID),
    .ack_in(regslice_both_ethernet_stream_in_V_keep_V_U_ack_in),
    .data_out(ethernet_stream_in_TKEEP_int_regslice),
    .vld_out(regslice_both_ethernet_stream_in_V_keep_V_U_vld_out),
    .ack_out(ethernet_stream_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_ethernet_stream_in_V_keep_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 8 ))
regslice_both_ethernet_stream_in_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ethernet_stream_in_TSTRB),
    .vld_in(ethernet_stream_in_TVALID),
    .ack_in(regslice_both_ethernet_stream_in_V_strb_V_U_ack_in),
    .data_out(ethernet_stream_in_TSTRB_int_regslice),
    .vld_out(regslice_both_ethernet_stream_in_V_strb_V_U_vld_out),
    .ack_out(ethernet_stream_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_ethernet_stream_in_V_strb_V_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 1 ))
regslice_both_ethernet_stream_in_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(ethernet_stream_in_TLAST),
    .vld_in(ethernet_stream_in_TVALID),
    .ack_in(regslice_both_ethernet_stream_in_V_last_V_U_ack_in),
    .data_out(ethernet_stream_in_TLAST_int_regslice),
    .vld_out(regslice_both_ethernet_stream_in_V_last_V_U_vld_out),
    .ack_out(ethernet_stream_in_TREADY_int_regslice),
    .apdone_blk(regslice_both_ethernet_stream_in_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone)))) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter24 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    ap_ext_blocking_n_reg <= ap_ext_blocking_n;
end

always @ (posedge ap_clk) begin
    ap_rst_n_inv <= ap_rst_reg_1;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_1 <= ap_rst_reg_2;
end

always @ (posedge ap_clk) begin
    ap_rst_reg_2 <= ~ap_rst_n;
end

always @ (posedge ap_clk) begin
    ap_str_blocking_n_reg <= ap_str_blocking_n;
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln882_reg_440 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvars_iv_reg_192 <= add_ln695_reg_444;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv_reg_192 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_nbreadreq_fu_120_p6 == 1'd1) & (icmp_ln882_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln324_reg_453 <= add_ln324_fu_286_p2;
        trunc_ln1_reg_459 <= {{add_ln324_fu_286_p2[63:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln695_reg_444 <= add_ln695_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_predicate_op118_read_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        empty_reg_464_3 <= ethernet_stream_in_TLAST_int_regslice;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln882_reg_440 <= icmp_ln882_fu_263_p2;
        tmp_reg_449_pp0_iter10_reg <= tmp_reg_449_pp0_iter9_reg;
        tmp_reg_449_pp0_iter11_reg <= tmp_reg_449_pp0_iter10_reg;
        tmp_reg_449_pp0_iter12_reg <= tmp_reg_449_pp0_iter11_reg;
        tmp_reg_449_pp0_iter13_reg <= tmp_reg_449_pp0_iter12_reg;
        tmp_reg_449_pp0_iter14_reg <= tmp_reg_449_pp0_iter13_reg;
        tmp_reg_449_pp0_iter15_reg <= tmp_reg_449_pp0_iter14_reg;
        tmp_reg_449_pp0_iter16_reg <= tmp_reg_449_pp0_iter15_reg;
        tmp_reg_449_pp0_iter17_reg <= tmp_reg_449_pp0_iter16_reg;
        tmp_reg_449_pp0_iter18_reg <= tmp_reg_449_pp0_iter17_reg;
        tmp_reg_449_pp0_iter19_reg <= tmp_reg_449_pp0_iter18_reg;
        tmp_reg_449_pp0_iter1_reg <= tmp_reg_449;
        tmp_reg_449_pp0_iter20_reg <= tmp_reg_449_pp0_iter19_reg;
        tmp_reg_449_pp0_iter21_reg <= tmp_reg_449_pp0_iter20_reg;
        tmp_reg_449_pp0_iter22_reg <= tmp_reg_449_pp0_iter21_reg;
        tmp_reg_449_pp0_iter23_reg <= tmp_reg_449_pp0_iter22_reg;
        tmp_reg_449_pp0_iter2_reg <= tmp_reg_449_pp0_iter1_reg;
        tmp_reg_449_pp0_iter3_reg <= tmp_reg_449_pp0_iter2_reg;
        tmp_reg_449_pp0_iter4_reg <= tmp_reg_449_pp0_iter3_reg;
        tmp_reg_449_pp0_iter5_reg <= tmp_reg_449_pp0_iter4_reg;
        tmp_reg_449_pp0_iter6_reg <= tmp_reg_449_pp0_iter5_reg;
        tmp_reg_449_pp0_iter7_reg <= tmp_reg_449_pp0_iter6_reg;
        tmp_reg_449_pp0_iter8_reg <= tmp_reg_449_pp0_iter7_reg;
        tmp_reg_449_pp0_iter9_reg <= tmp_reg_449_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        out_read_reg_415 <= out_r;
        shl_ln324_2_reg_430 <= shl_ln324_2_fu_245_p2;
        shl_ln324_reg_420 <= shl_ln324_fu_223_p2;
        zext_ln18_reg_435[6 : 3] <= zext_ln18_fu_259_p1[6 : 3];
        zext_ln324_1_reg_425[6 : 3] <= zext_ln324_1_fu_237_p1[6 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_449 == 1'd1) & (icmp_ln882_reg_440 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        shl_ln324_5_reg_480 <= shl_ln324_5_fu_340_p2;
        tmp_data_V_reg_469 <= ethernet_stream_in_TDATA_int_regslice;
        trunc_ln324_1_reg_485 <= {{add_ln324_1_fu_323_p2[63:4]}};
        trunc_ln324_2_reg_490 <= {{add_ln324_2_fu_355_p2[63:4]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_reg_449 == 1'd1) & (icmp_ln882_reg_440 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        shl_ln324_6_reg_501 <= shl_ln324_6_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln882_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_reg_449 <= tmp_nbreadreq_fu_120_p6;
    end
end

always @ (*) begin
    if ((icmp_ln882_fu_263_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln882_reg_440 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvars_iv_phi_fu_196_p4 = add_ln695_reg_444;
    end else begin
        ap_phi_mux_indvars_iv_phi_fu_196_p4 = indvars_iv_reg_192;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_449 == 1'd1) & (icmp_ln882_reg_440 == 1'd0) & (1'b0 == ap_block_pp0_stage1))) begin
        ethernet_stream_in_TDATA_blk_n = ethernet_stream_in_TVALID_int_regslice;
    end else begin
        ethernet_stream_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op118_read_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ethernet_stream_in_TREADY_int_regslice = 1'b1;
    end else begin
        ethernet_stream_in_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_449 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gmem_AWADDR = sext_ln324_2_fu_396_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op137_writereq_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        gmem_AWADDR = sext_ln324_1_fu_377_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op124_writereq_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        gmem_AWADDR = sext_ln324_fu_313_p1;
    end else begin
        gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op137_writereq_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op124_writereq_state3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_449 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem_AWVALID = 1'b1;
    end else begin
        gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_449_pp0_iter23_reg == 1'd1) & (ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter24 == 1'b1) & (tmp_reg_449_pp0_iter23_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_reg_449_pp0_iter23_reg == 1'd1) & (ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        gmem_BREADY = 1'b1;
    end else begin
        gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_449_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        gmem_WDATA = zext_ln324_7_fu_406_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_449 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        gmem_WDATA = shl_ln324_5_reg_480;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op134_write_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        gmem_WDATA = zext_ln324_4_fu_373_p1;
    end else begin
        gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_449_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        gmem_WSTRB = shl_ln324_2_reg_430;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_449 == 1'd1) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        gmem_WSTRB = shl_ln324_reg_420;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op134_write_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        gmem_WSTRB = 16'd255;
    end else begin
        gmem_WSTRB = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (ap_predicate_op134_write_state4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_449_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_449 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        gmem_WVALID = 1'b1;
    end else begin
        gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_449 == 1'd1) & (icmp_ln882_reg_440 == 1'd0) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_reg_449 == 1'd1) & (icmp_ln882_reg_440 == 1'd0) & (1'b0 == ap_block_pp0_stage2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_449 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_449_pp0_iter23_reg == 1'd1) & (ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter24 == 1'b1) & (tmp_reg_449_pp0_iter23_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_reg_449_pp0_iter23_reg == 1'd1) & (ap_enable_reg_pp0_iter23 == 1'b1) & (1'b0 == ap_block_pp0_stage2)))) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_reg_449 == 1'd1) & (icmp_ln882_reg_440 == 1'd0) & (1'b0 == ap_block_pp0_stage2)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_reg_449_pp0_iter1_reg == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (tmp_reg_449 == 1'd1) & (1'b0 == ap_block_pp0_stage0)))) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b0) & (ap_ext_blocking_n == 1'b1))) begin
        stall_done_ext = 1'b1;
    end else begin
        stall_done_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b0) & (ap_int_blocking_n == 1'b1))) begin
        stall_done_int = 1'b1;
    end else begin
        stall_done_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b0) & (ap_str_blocking_n == 1'b1))) begin
        stall_done_str = 1'b1;
    end else begin
        stall_done_str = 1'b0;
    end
end

always @ (*) begin
    if (((ap_ext_blocking_n_reg == 1'b1) & (ap_ext_blocking_n == 1'b0))) begin
        stall_start_ext = 1'b1;
    end else begin
        stall_start_ext = 1'b0;
    end
end

always @ (*) begin
    if (((ap_int_blocking_n_reg == 1'b1) & (ap_int_blocking_n == 1'b0))) begin
        stall_start_int = 1'b1;
    end else begin
        stall_start_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_str_blocking_n_reg == 1'b1) & (ap_str_blocking_n == 1'b0))) begin
        stall_start_str = 1'b1;
    end else begin
        stall_start_str = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln882_fu_263_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter24 == 1'b1) & (ap_enable_reg_pp0_iter23 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln882_fu_263_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter24 == 1'b1) & (ap_enable_reg_pp0_iter23 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_213_p2 = ($signed(4'd10) + $signed(trunc_ln18_fu_203_p1));

assign add_ln324_1_fu_323_p2 = (add_ln324_reg_453 + 64'd8);

assign add_ln324_2_fu_355_p2 = (add_ln324_reg_453 + 64'd10);

assign add_ln324_fu_286_p2 = (zext_ln324_3_fu_282_p1 + out_read_reg_415);

assign add_ln695_fu_268_p2 = (ap_phi_mux_indvars_iv_phi_fu_196_p4 + 32'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1) & (tmp_reg_449_pp0_iter23_reg == 1'd1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1) & (tmp_reg_449_pp0_iter23_reg == 1'd1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((gmem_BVALID == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b1) & (tmp_reg_449_pp0_iter23_reg == 1'd1)) | ((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (ethernet_stream_in_TVALID_int_regslice == 1'b0) & (ap_predicate_op118_read_state3 == 1'b1)) | ((gmem_BVALID == 1'b0) & (tmp_reg_449_pp0_iter23_reg == 1'd1) & (ap_enable_reg_pp0_iter23 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((ethernet_stream_in_TVALID_int_regslice == 1'b0) & (ap_predicate_op118_read_state3 == 1'b1)))) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((gmem_BVALID == 1'b0) & (tmp_reg_449_pp0_iter23_reg == 1'd1) & (ap_enable_reg_pp0_iter23 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state3_io) | ((ethernet_stream_in_TVALID_int_regslice == 1'b0) & (ap_predicate_op118_read_state3 == 1'b1)))) | ((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((gmem_BVALID == 1'b0) & (tmp_reg_449_pp0_iter23_reg == 1'd1) & (ap_enable_reg_pp0_iter23 == 1'b1)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_01001 = ((gmem_BVALID == 1'b0) & (tmp_reg_449_pp0_iter23_reg == 1'd1) & (ap_enable_reg_pp0_iter23 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((gmem_BVALID == 1'b0) & (tmp_reg_449_pp0_iter23_reg == 1'd1) & (ap_enable_reg_pp0_iter23 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io)) | ((gmem_BVALID == 1'b0) & (tmp_reg_449_pp0_iter23_reg == 1'd1) & (ap_enable_reg_pp0_iter23 == 1'b1)));
end

assign ap_block_state10_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage2_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage2_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage2_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage2_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage2_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage1_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage2_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage1_iter12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((ap_predicate_op124_writereq_state3 == 1'b1) & (gmem_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state3_pp0_stage1_iter0 = ((ethernet_stream_in_TVALID_int_regslice == 1'b0) & (ap_predicate_op118_read_state3 == 1'b1));
end

assign ap_block_state40_pp0_stage2_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage1_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage2_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage1_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage2_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage1_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage2_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((ap_predicate_op137_writereq_state4 == 1'b1) & (gmem_AWREADY == 1'b0)) | ((ap_predicate_op134_write_state4 == 1'b1) & (gmem_WREADY == 1'b0)));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage1_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage2_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage1_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage2_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage1_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage2_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = (((gmem_AWREADY == 1'b0) & (tmp_reg_449 == 1'd1)) | ((gmem_WREADY == 1'b0) & (tmp_reg_449 == 1'd1)));
end

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage1_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage2_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage1_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage2_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage1_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage2_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage1_iter22 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((gmem_WREADY == 1'b0) & (tmp_reg_449_pp0_iter1_reg == 1'd1));
end

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage2_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state72_pp0_stage1_iter23 = ((gmem_BVALID == 1'b0) & (tmp_reg_449_pp0_iter23_reg == 1'd1));
end

always @ (*) begin
    ap_block_state73_pp0_stage2_iter23 = ((gmem_BVALID == 1'b0) & (tmp_reg_449_pp0_iter23_reg == 1'd1));
end

always @ (*) begin
    ap_block_state74_pp0_stage0_iter24 = ((gmem_BVALID == 1'b0) & (tmp_reg_449_pp0_iter23_reg == 1'd1));
end

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ext_blocking_cur_n = (gmem_blk_n_W & gmem_blk_n_B & gmem_blk_n_AW);

assign ap_ext_blocking_n = (ap_ext_blocking_cur_n & 1'b1);

assign ap_int_blocking_n = (1'b1 & 1'b1);

always @ (*) begin
    ap_predicate_op118_read_state3 = ((tmp_reg_449 == 1'd1) & (icmp_ln882_reg_440 == 1'd0));
end

always @ (*) begin
    ap_predicate_op124_writereq_state3 = ((tmp_reg_449 == 1'd1) & (icmp_ln882_reg_440 == 1'd0));
end

always @ (*) begin
    ap_predicate_op134_write_state4 = ((tmp_reg_449 == 1'd1) & (icmp_ln882_reg_440 == 1'd0));
end

always @ (*) begin
    ap_predicate_op137_writereq_state4 = ((tmp_reg_449 == 1'd1) & (icmp_ln882_reg_440 == 1'd0));
end

assign ap_str_blocking_cur_n = ethernet_stream_in_TDATA_blk_n;

assign ap_str_blocking_n = (ap_str_blocking_cur_n & 1'b1);

assign ethernet_stream_in_TREADY = regslice_both_ethernet_stream_in_V_data_V_U_ack_in;

assign event_done = ap_done;

assign icmp_ln882_fu_263_p2 = ((ap_phi_mux_indvars_iv_phi_fu_196_p4 == buffSize) ? 1'b1 : 1'b0);

assign sext_ln324_1_fu_377_p1 = $signed(trunc_ln324_1_reg_485);

assign sext_ln324_2_fu_396_p1 = $signed(trunc_ln324_2_reg_490);

assign sext_ln324_fu_313_p1 = $signed(trunc_ln1_reg_459);

assign shl_ln324_1_fu_229_p3 = {{xor_ln18_fu_207_p2}, {3'd0}};

assign shl_ln324_2_fu_245_p2 = 16'd1 << zext_ln324_2_fu_241_p1;

assign shl_ln324_3_fu_251_p3 = {{add_ln18_fu_213_p2}, {3'd0}};

assign shl_ln324_4_fu_274_p3 = {{ap_phi_mux_indvars_iv_phi_fu_196_p4}, {4'd0}};

assign shl_ln324_5_fu_340_p2 = zext_ln324_5_fu_336_p1 << zext_ln324_1_reg_425;

assign shl_ln324_6_fu_391_p2 = zext_ln324_6_fu_387_p1 << zext_ln18_reg_435;

assign shl_ln324_fu_223_p2 = 16'd3 << zext_ln324_fu_219_p1;

assign tmp_2_fu_328_p3 = {{ethernet_stream_in_TSTRB_int_regslice}, {ethernet_stream_in_TKEEP_int_regslice}};

assign tmp_nbreadreq_fu_120_p6 = ethernet_stream_in_TVALID_int_regslice;

assign trunc_ln18_fu_203_p1 = out_r[3:0];

assign xor_ln18_fu_207_p2 = (trunc_ln18_fu_203_p1 ^ 4'd8);

assign zext_ln18_fu_259_p1 = shl_ln324_3_fu_251_p3;

assign zext_ln324_1_fu_237_p1 = shl_ln324_1_fu_229_p3;

assign zext_ln324_2_fu_241_p1 = add_ln18_fu_213_p2;

assign zext_ln324_3_fu_282_p1 = shl_ln324_4_fu_274_p3;

assign zext_ln324_4_fu_373_p1 = tmp_data_V_reg_469;

assign zext_ln324_5_fu_336_p1 = tmp_2_fu_328_p3;

assign zext_ln324_6_fu_387_p1 = empty_reg_464_3;

assign zext_ln324_7_fu_406_p1 = shl_ln324_6_reg_501;

assign zext_ln324_fu_219_p1 = xor_ln18_fu_207_p2;

always @ (posedge ap_clk) begin
    zext_ln324_1_reg_425[2:0] <= 3'b000;
    zext_ln324_1_reg_425[127:7] <= 121'b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_435[2:0] <= 3'b000;
    zext_ln18_reg_435[120:7] <= 114'b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    ap_int_blocking_n_reg <= 1'b1;
end

endmodule //EthOutTop
